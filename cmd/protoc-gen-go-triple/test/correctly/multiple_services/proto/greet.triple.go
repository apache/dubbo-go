// Code generated by protoc-gen-triple. DO NOT EDIT.
//
// Source: proto/greet.proto
package greet

import (
	"context"
)

import (
	"dubbo.apache.org/dubbo-go/v3"
	"dubbo.apache.org/dubbo-go/v3/client"
	"dubbo.apache.org/dubbo-go/v3/common"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/protocol/triple/triple_protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
)

// This is a compile-time assertion to ensure that this generated file and the Triple package
// are compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of Triple newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of Triple or updating the Triple
// version compiled into your binary.
const _ = triple_protocol.IsAtLeastVersion0_1_0

const (
	// GreetAServiceName is the fully-qualified name of the GreetAService service.
	GreetAServiceName = "greet.GreetAService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetAServiceGreetProcedure is the fully-qualified name of the GreetAService's Greet RPC.
	GreetAServiceGreetProcedure = "/greet.GreetAService/Greet"
)
const (
	// GreetBServiceName is the fully-qualified name of the GreetBService service.
	GreetBServiceName = "greet.GreetBService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetBServiceGreetProcedure is the fully-qualified name of the GreetBService's Greet RPC.
	GreetBServiceGreetProcedure = "/greet.GreetBService/Greet"
)
const (
	// GreetCServiceName is the fully-qualified name of the GreetCService service.
	GreetCServiceName = "greet.GreetCService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetCServiceGreetProcedure is the fully-qualified name of the GreetCService's Greet RPC.
	GreetCServiceGreetProcedure = "/greet.GreetCService/Greet"
)

var (
	_ GreetAService = (*GreetAServiceImpl)(nil)

	_ GreetBService = (*GreetBServiceImpl)(nil)

	_ GreetCService = (*GreetCServiceImpl)(nil)
)

// GreetAService is a client for the greet.GreetAService service.
type GreetAService interface {
	Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error)
}

// GreetBService is a client for the greet.GreetBService service.
type GreetBService interface {
	Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error)
}

// GreetCService is a client for the greet.GreetCService service.
type GreetCService interface {
	Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error)
}

// NewGreetAService constructs a client for the greet.GreetAService service.
func NewGreetAService(cli *client.Client, opts ...client.ReferenceOption) (GreetAService, error) {
	conn, err := cli.DialWithInfo("greet.GreetAService", &GreetAService_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &GreetAServiceImpl{
		conn: conn,
	}, nil
}

func SetConsumerGreetAService(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &GreetAService_ClientInfo)
}

// GreetAServiceImpl implements GreetAService.
type GreetAServiceImpl struct {
	conn *client.Connection
}

func (c *GreetAServiceImpl) Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error) {
	resp := new(GreetResponse)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "Greet", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

// NewGreetBService constructs a client for the greet.GreetBService service.
func NewGreetBService(cli *client.Client, opts ...client.ReferenceOption) (GreetBService, error) {
	conn, err := cli.DialWithInfo("greet.GreetBService", &GreetBService_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &GreetBServiceImpl{
		conn: conn,
	}, nil
}

func SetConsumerGreetBService(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &GreetBService_ClientInfo)
}

// GreetBServiceImpl implements GreetBService.
type GreetBServiceImpl struct {
	conn *client.Connection
}

func (c *GreetBServiceImpl) Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error) {
	resp := new(GreetResponse)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "Greet", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

// NewGreetCService constructs a client for the greet.GreetCService service.
func NewGreetCService(cli *client.Client, opts ...client.ReferenceOption) (GreetCService, error) {
	conn, err := cli.DialWithInfo("greet.GreetCService", &GreetCService_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &GreetCServiceImpl{
		conn: conn,
	}, nil
}

func SetConsumerGreetCService(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &GreetCService_ClientInfo)
}

// GreetCServiceImpl implements GreetCService.
type GreetCServiceImpl struct {
	conn *client.Connection
}

func (c *GreetCServiceImpl) Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error) {
	resp := new(GreetResponse)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "Greet", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

var GreetAService_ClientInfo = client.ClientInfo{
	InterfaceName: "greet.GreetAService",
	MethodNames:   []string{"Greet"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*GreetAServiceImpl)
		dubboCli.conn = conn
	},
}
var GreetBService_ClientInfo = client.ClientInfo{
	InterfaceName: "greet.GreetBService",
	MethodNames:   []string{"Greet"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*GreetBServiceImpl)
		dubboCli.conn = conn
	},
}
var GreetCService_ClientInfo = client.ClientInfo{
	InterfaceName: "greet.GreetCService",
	MethodNames:   []string{"Greet"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*GreetCServiceImpl)
		dubboCli.conn = conn
	},
}

// GreetAServiceHandler is an implementation of the greet.GreetAService service.
type GreetAServiceHandler interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
}

func RegisterGreetAServiceHandler(srv *server.Server, hdlr GreetAServiceHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &GreetAService_ServiceInfo, opts...)
}

func SetProviderGreetAService(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &GreetAService_ServiceInfo)
}

// GreetBServiceHandler is an implementation of the greet.GreetBService service.
type GreetBServiceHandler interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
}

func RegisterGreetBServiceHandler(srv *server.Server, hdlr GreetBServiceHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &GreetBService_ServiceInfo, opts...)
}

func SetProviderGreetBService(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &GreetBService_ServiceInfo)
}

// GreetCServiceHandler is an implementation of the greet.GreetCService service.
type GreetCServiceHandler interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
}

func RegisterGreetCServiceHandler(srv *server.Server, hdlr GreetCServiceHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &GreetCService_ServiceInfo, opts...)
}

func SetProviderGreetCService(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &GreetCService_ServiceInfo)
}

var GreetAService_ServiceInfo = server.ServiceInfo{
	InterfaceName: "greet.GreetAService",
	ServiceType:   (*GreetAServiceHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "Greet",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(GreetRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*GreetRequest)
				res, err := handler.(GreetAServiceHandler).Greet(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
var GreetBService_ServiceInfo = server.ServiceInfo{
	InterfaceName: "greet.GreetBService",
	ServiceType:   (*GreetBServiceHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "Greet",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(GreetRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*GreetRequest)
				res, err := handler.(GreetBServiceHandler).Greet(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
var GreetCService_ServiceInfo = server.ServiceInfo{
	InterfaceName: "greet.GreetCService",
	ServiceType:   (*GreetCServiceHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "Greet",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(GreetRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*GreetRequest)
				res, err := handler.(GreetCServiceHandler).Greet(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
