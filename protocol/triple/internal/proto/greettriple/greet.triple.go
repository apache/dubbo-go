// Code generated by protoc-gen-triple. DO NOT EDIT.
//
// Source: protocol/triple/internal/proto/greet.proto

package greettriple

import (
	context "context"
	consumer "dubbo.apache.org/dubbo-go/v3/consumer"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	proto "dubbo.apache.org/dubbo-go/v3/protocol/triple/internal/proto"
	triple_protocol "dubbo.apache.org/dubbo-go/v3/protocol/triple/triple_protocol"
	errors "errors"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = triple_protocol.IsAtLeastVersion0_1_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "greet.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceGreetProcedure is the fully-qualified name of the GreetService's Greet RPC.
	GreetServiceGreetProcedure = "/greet.GreetService/Greet"
	// GreetServiceGreetStreamProcedure is the fully-qualified name of the GreetService's GreetStream
	// RPC.
	GreetServiceGreetStreamProcedure = "/greet.GreetService/GreetStream"
	// GreetServiceGreetClientStreamProcedure is the fully-qualified name of the GreetService's
	// GreetClientStream RPC.
	GreetServiceGreetClientStreamProcedure = "/greet.GreetService/GreetClientStream"
	// GreetServiceGreetServerStreamProcedure is the fully-qualified name of the GreetService's
	// GreetServerStream RPC.
	GreetServiceGreetServerStreamProcedure = "/greet.GreetService/GreetServerStream"
)

// GreetServiceClient is a client for the greet.GreetService service.
type GreetServiceClient interface {
	Greet(ctx context.Context, req *proto.GreetRequest, opts ...consumer.ConsumeOption) (*proto.GreetResponse, error)
	GreetStream(ctx context.Context, opts ...consumer.ConsumeOption) (*triple_protocol.BidiStreamForClient, error)
	GreetClientStream(ctx context.Context, opts ...consumer.ConsumeOption) (*triple_protocol.ClientStreamForClient, error)
	GreetServerStream(ctx context.Context, req *proto.GreetServerStreamRequest, opts ...consumer.ConsumeOption) (*triple_protocol.ServerStreamForClient, error)
}

// NewGreetServiceClient constructs a client for the greet.GreetService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(con *consumer.Consumer) (GreetServiceClient, error) {
	if err := con.Assemble("greet.GreetService", []string{"Greet", "GreetStream", "GreetClientStream", "GreetServerStream"}, nil); err != nil {
		return nil, err
	}
	return &greetServiceClient{
		con: con,
	}, nil
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	con *consumer.Consumer
}

func (c *greetServiceClient) Greet(ctx context.Context, req *proto.GreetRequest, opts ...consumer.ConsumeOption) (*proto.GreetResponse, error) {
	triReq := triple_protocol.NewRequest(req)
	resp := new(proto.GreetResponse)
	triResp := triple_protocol.NewResponse(resp)
	if err := c.con.ConsumeUnary(ctx, triReq, triResp, "greet.GreetService", "Greet", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *greetServiceClient) GreetStream(ctx context.Context, opts ...consumer.ConsumeOption) (*triple_protocol.BidiStreamForClient, error) {
	stream, err := c.con.ConsumeBidiStream(ctx, "greet.GreetService", "GreetStream", opts...)
	if err != nil {
		return nil, err
	}
	rawStream := stream.(*triple_protocol.BidiStreamForClient)
	return rawStream, nil
}

func (c *greetServiceClient) GreetClientStream(ctx context.Context, opts ...consumer.ConsumeOption) (*triple_protocol.ClientStreamForClient, error) {
	stream, err := c.con.ConsumeClientStream(ctx, "greet.GreetService", "GreetClientStream", opts...)
	if err != nil {
		return nil, err
	}
	rawStream := stream.(*triple_protocol.ClientStreamForClient)
	return rawStream, nil
}

func (c *greetServiceClient) GreetServerStream(ctx context.Context, req *proto.GreetServerStreamRequest, opts ...consumer.ConsumeOption) (*triple_protocol.ServerStreamForClient, error) {
	triReq := triple_protocol.NewRequest(req)
	stream, err := c.con.ConsumeServerStream(ctx, triReq, "greet.GreetService", "GreetServerStream", opts...)
	if err != nil {
		return nil, err
	}
	rawStream := stream.(*triple_protocol.ServerStreamForClient)
	return rawStream, nil
}

// GreetServiceHandler is an implementation of the greet.GreetService service.
type GreetServiceHandler interface {
	Greet(context.Context, *proto.GreetRequest) (*proto.GreetResponse, error)
	GreetStream(context.Context, *triple_protocol.BidiStream) error
	GreetClientStream(context.Context, *triple_protocol.ClientStream) (*triple_protocol.Response, error)
	GreetServerStream(context.Context, *triple_protocol.Request, *triple_protocol.ServerStream) error
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...triple_protocol.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GreetServiceGreetProcedure, triple_protocol.NewUnaryHandler(
		GreetServiceGreetProcedure,
		svc.Greet,
		opts...,
	))
	mux.Handle(GreetServiceGreetStreamProcedure, triple_protocol.NewBidiStreamHandler(
		GreetServiceGreetStreamProcedure,
		svc.GreetStream,
		opts...,
	))
	mux.Handle(GreetServiceGreetClientStreamProcedure, triple_protocol.NewClientStreamHandler(
		GreetServiceGreetClientStreamProcedure,
		svc.GreetClientStream,
		opts...,
	))
	mux.Handle(GreetServiceGreetServerStreamProcedure, triple_protocol.NewServerStreamHandler(
		GreetServiceGreetServerStreamProcedure,
		svc.GreetServerStream,
		opts...,
	))
	return "/greet.GreetService/", mux
}

// GreetServiceProviderBase is the Dubbo handler base embedded into user implementation api for the
// greet.GreetService service.
type GreetServiceProviderBase struct {
	proxyImpl protocol.Invoker
}

// SetProxyImpl sets proxy.
func (s *GreetServiceProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

// GetProxyImpl gets proxy.
func (s *GreetServiceProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

// Register
func (s *GreetServiceProviderBase) BuildHandler(impl interface{}, opts ...triple_protocol.HandlerOption) (string, http.Handler) {
	_, ok := impl.(GreetServiceHandler)
	if !ok {
		panic("impl has not implemented GreetServiceHandler")
	}
	mux := http.NewServeMux()
	mux.Handle(GreetServiceGreetProcedure, triple_protocol.NewUnaryHandler(
		GreetServiceGreetProcedure,
		func(ctx context.Context, req *triple_protocol.Request[proto.GreetRequest]) (*triple_protocol.Response[proto.GreetResponse], error) {
			var args []interface{}
			args = append(args, req)
			// provider.Serve()
			invo := invocation.NewRPCInvocation("Greet", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Result().(*triple_protocol.Response[proto.GreetResponse]), res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetStreamProcedure, triple_protocol.NewBidiStreamHandler(
		GreetServiceGreetStreamProcedure,
		func(ctx context.Context, stream *triple_protocol.BidiStream[proto.GreetStreamRequest, proto.GreetStreamResponse]) error {
			var args []interface{}
			args = append(args, stream)
			invo := invocation.NewRPCInvocation("GreetStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetClientStreamProcedure, triple_protocol.NewClientStreamHandler(
		GreetServiceGreetClientStreamProcedure,
		func(ctx context.Context, stream *triple_protocol.ClientStream[proto.GreetClientStreamRequest]) (*triple_protocol.Response[proto.GreetClientStreamResponse], error) {
			var args []interface{}
			args = append(args, stream)
			invo := invocation.NewRPCInvocation("GreetClientStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Result().(*triple_protocol.Response[proto.GreetClientStreamResponse]), res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetServerStreamProcedure, triple_protocol.NewServerStreamHandler(
		GreetServiceGreetServerStreamProcedure,
		func(ctx context.Context, req *triple_protocol.Request[proto.GreetServerStreamRequest], stream *triple_protocol.ServerStream[proto.GreetServerStreamResponse]) error {
			var args []interface{}
			args = append(args, req, stream)
			invo := invocation.NewRPCInvocation("GreetServerStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Error()
		},
		opts...,
	))
	return "/greet.GreetService/", mux
}

func (s *GreetServiceProviderBase) Reference() string {
	return "greet.GreetService"
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) Greet(context.Context, *proto.GreetRequest) (*proto.GreetResponse, error) {
	return nil, triple_protocol.NewError(triple_protocol.CodeUnimplemented, errors.New("greet.GreetService.Greet is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetStream(context.Context, *triple_protocol.BidiStream) error {
	return triple_protocol.NewError(triple_protocol.CodeUnimplemented, errors.New("greet.GreetService.GreetStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetClientStream(context.Context, *triple_protocol.ClientStream) (*triple_protocol.Response, error) {
	return nil, triple_protocol.NewError(triple_protocol.CodeUnimplemented, errors.New("greet.GreetService.GreetClientStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetServerStream(context.Context, *triple_protocol.Request, *triple_protocol.ServerStream) error {
	return triple_protocol.NewError(triple_protocol.CodeUnimplemented, errors.New("greet.GreetService.GreetServerStream is not implemented"))
}
