// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/grpc_new/internal/proto/greet.proto

package greetconnect

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	connect "dubbo.apache.org/dubbo-go/v3/protocol/grpc_new/connect"
	proto "dubbo.apache.org/dubbo-go/v3/protocol/grpc_new/internal/proto"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "greet.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceGreetProcedure is the fully-qualified name of the GreetService's Greet RPC.
	GreetServiceGreetProcedure = "/greet.GreetService/Greet"
	// GreetServiceGreetStreamProcedure is the fully-qualified name of the GreetService's GreetStream
	// RPC.
	GreetServiceGreetStreamProcedure = "/greet.GreetService/GreetStream"
	// GreetServiceGreetClientStreamProcedure is the fully-qualified name of the GreetService's
	// GreetClientStream RPC.
	GreetServiceGreetClientStreamProcedure = "/greet.GreetService/GreetClientStream"
	// GreetServiceGreetServerStreamProcedure is the fully-qualified name of the GreetService's
	// GreetServerStream RPC.
	GreetServiceGreetServerStreamProcedure = "/greet.GreetService/GreetServerStream"
)

// GreetServiceClient is a client for the greet.GreetService service.
type GreetServiceClient interface {
	Greet(context.Context, *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error)
	GreetStream(context.Context) (*connect.BidiStreamForClient[proto.GreetStreamRequest, proto.GreetStreamResponse], error)
	GreetClientStream(context.Context) (*connect.ClientStreamForClient[proto.GreetClientStreamRequest, proto.GreetClientStreamResponse], error)
	GreetServerStream(context.Context, *connect.Request[proto.GreetServerStreamRequest]) (*connect.ServerStreamForClient[proto.GreetServerStreamResponse], error)
}

// NewGreetServiceClient constructs a client for the greet.GreetService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetServiceClient{
		greet: connect.NewClient[proto.GreetRequest, proto.GreetResponse](
			httpClient,
			baseURL+GreetServiceGreetProcedure,
			opts...,
		),
		greetStream: connect.NewClient[proto.GreetStreamRequest, proto.GreetStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetStreamProcedure,
			opts...,
		),
		greetClientStream: connect.NewClient[proto.GreetClientStreamRequest, proto.GreetClientStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetClientStreamProcedure,
			opts...,
		),
		greetServerStream: connect.NewClient[proto.GreetServerStreamRequest, proto.GreetServerStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetServerStreamProcedure,
			opts...,
		),
	}
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	greet             *connect.Client[proto.GreetRequest, proto.GreetResponse]
	greetStream       *connect.Client[proto.GreetStreamRequest, proto.GreetStreamResponse]
	greetClientStream *connect.Client[proto.GreetClientStreamRequest, proto.GreetClientStreamResponse]
	greetServerStream *connect.Client[proto.GreetServerStreamRequest, proto.GreetServerStreamResponse]
}

// Greet calls greet.GreetService.Greet.
func (c *greetServiceClient) Greet(ctx context.Context, req *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// GreetStream calls greet.GreetService.GreetStream.
func (c *greetServiceClient) GreetStream(ctx context.Context) (*connect.BidiStreamForClient[proto.GreetStreamRequest, proto.GreetStreamResponse], error) {
	return c.greetStream.CallBidiStream(ctx)
}

// GreetClientStream calls greet.GreetService.GreetClientStream.
func (c *greetServiceClient) GreetClientStream(ctx context.Context) (*connect.ClientStreamForClient[proto.GreetClientStreamRequest, proto.GreetClientStreamResponse], error) {
	return c.greetClientStream.CallClientStream(ctx)
}

// GreetServerStream calls greet.GreetService.GreetServerStream.
func (c *greetServiceClient) GreetServerStream(ctx context.Context, req *connect.Request[proto.GreetServerStreamRequest]) (*connect.ServerStreamForClient[proto.GreetServerStreamResponse], error) {
	return c.greetServerStream.CallServerStream(ctx, req)
}

// GreetServiceClientImpl is the Dubbo client api for the greet.GreetService service.
type GreetServiceClientImpl struct {
	Greet             func(ctx context.Context, req *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error)
	GreetStream       func(ctx context.Context) (*connect.BidiStreamForClient[proto.GreetStreamRequest, proto.GreetStreamResponse], error)
	GreetClientStream func(ctx context.Context) (*connect.ClientStreamForClient[proto.GreetClientStreamRequest, proto.GreetClientStreamResponse], error)
	GreetServerStream func(ctx context.Context, req *connect.Request[proto.GreetServerStreamRequest]) (*connect.ServerStreamForClient[proto.GreetServerStreamResponse], error)
}

// GetDubboStub is used for Dubbo to initialize client interface
func (c *GreetServiceClientImpl) GetDubboStub(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetServiceClient {
	return NewGreetServiceClient(httpClient, baseURL, opts...)
}

// Reference is used for Dubbo consumer to refer this service
func (c *GreetServiceClientImpl) Reference() string {
	return "greet.GreetService"
}

// GreetServiceHandler is an implementation of the greet.GreetService service.
type GreetServiceHandler interface {
	Greet(context.Context, *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error)
	GreetStream(context.Context, *connect.BidiStream[proto.GreetStreamRequest, proto.GreetStreamResponse]) error
	GreetClientStream(context.Context, *connect.ClientStream[proto.GreetClientStreamRequest]) (*connect.Response[proto.GreetClientStreamResponse], error)
	GreetServerStream(context.Context, *connect.Request[proto.GreetServerStreamRequest], *connect.ServerStream[proto.GreetServerStreamResponse]) error
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GreetServiceGreetProcedure, connect.NewUnaryHandler(
		GreetServiceGreetProcedure,
		svc.Greet,
		opts...,
	))
	mux.Handle(GreetServiceGreetStreamProcedure, connect.NewBidiStreamHandler(
		GreetServiceGreetStreamProcedure,
		svc.GreetStream,
		opts...,
	))
	mux.Handle(GreetServiceGreetClientStreamProcedure, connect.NewClientStreamHandler(
		GreetServiceGreetClientStreamProcedure,
		svc.GreetClientStream,
		opts...,
	))
	mux.Handle(GreetServiceGreetServerStreamProcedure, connect.NewServerStreamHandler(
		GreetServiceGreetServerStreamProcedure,
		svc.GreetServerStream,
		opts...,
	))
	return "/greet.GreetService/", mux
}

// GreetServiceProviderBase is the Dubbo handler base embedded into user implementation api for the
// greet.GreetService service.
type GreetServiceProviderBase struct {
	proxyImpl protocol.Invoker
}

// SetProxyImpl sets proxy.
func (s *GreetServiceProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

// GetProxyImpl gets proxy.
func (s *GreetServiceProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *GreetServiceProviderBase) BuildHandler(impl interface{}, opts ...connect.HandlerOption) (string, http.Handler) {
	_, ok := impl.(GreetServiceHandler)
	if !ok {
		panic("impl has not implemented GreetServiceHandler")
	}
	mux := http.NewServeMux()
	mux.Handle(GreetServiceGreetProcedure, connect.NewUnaryHandler(
		GreetServiceGreetProcedure,
		func(ctx context.Context, req *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error) {
			var args []interface{}
			args = append(args, req)
			invo := invocation.NewRPCInvocation("Greet", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Result().(*connect.Response[proto.GreetResponse]), res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetStreamProcedure, connect.NewBidiStreamHandler(
		GreetServiceGreetStreamProcedure,
		func(ctx context.Context, stream *connect.BidiStream[proto.GreetStreamRequest, proto.GreetStreamResponse]) error {
			var args []interface{}
			args = append(args, stream)
			invo := invocation.NewRPCInvocation("GreetStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetClientStreamProcedure, connect.NewClientStreamHandler(
		GreetServiceGreetClientStreamProcedure,
		func(ctx context.Context, stream *connect.ClientStream[proto.GreetClientStreamRequest]) (*connect.Response[proto.GreetClientStreamResponse], error) {
			var args []interface{}
			args = append(args, stream)
			invo := invocation.NewRPCInvocation("GreetClientStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Result().(*connect.Response[proto.GreetClientStreamResponse]), res.Error()
		},
		opts...,
	))
	mux.Handle(GreetServiceGreetServerStreamProcedure, connect.NewServerStreamHandler(
		GreetServiceGreetServerStreamProcedure,
		func(ctx context.Context, req *connect.Request[proto.GreetServerStreamRequest], stream *connect.ServerStream[proto.GreetServerStreamResponse]) error {
			var args []interface{}
			args = append(args, req, stream)
			invo := invocation.NewRPCInvocation("GreetServerStream", args, nil)
			res := s.proxyImpl.Invoke(ctx, invo)
			return res.Error()
		},
		opts...,
	))
	return "/greet.GreetService/", mux
}

func (s *GreetServiceProviderBase) Reference() string {
	return "greet.GreetService"
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) Greet(context.Context, *connect.Request[proto.GreetRequest]) (*connect.Response[proto.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.GreetService.Greet is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetStream(context.Context, *connect.BidiStream[proto.GreetStreamRequest, proto.GreetStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("greet.GreetService.GreetStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetClientStream(context.Context, *connect.ClientStream[proto.GreetClientStreamRequest]) (*connect.Response[proto.GreetClientStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.GreetService.GreetClientStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetServerStream(context.Context, *connect.Request[proto.GreetServerStreamRequest], *connect.ServerStream[proto.GreetServerStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("greet.GreetService.GreetServerStream is not implemented"))
}
