// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protocol/grpc_new/connect/proto/connect/import/v1/import.proto

package importv1connect

import (
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	connect "dubbo.apache.org/dubbo-go/v3/protocol/grpc_new/connect"
	_ "dubbo.apache.org/dubbo-go/v3/protocol/grpc_new/connect/proto/connect/import/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ImportServiceName is the fully-qualified name of the ImportService service.
	ImportServiceName = "connect.import.v1.ImportService"
)

// ImportServiceClient is a client for the connect.import.v1.ImportService service.
type ImportServiceClient interface {
}

// NewImportServiceClient constructs a client for the connect.import.v1.ImportService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &importServiceClient{}
}

// importServiceClient implements ImportServiceClient.
type importServiceClient struct {
}

// ImportServiceClientImpl is the Dubbo client api for the connect.import.v1.ImportService service.
type ImportServiceClientImpl struct {
}

// GetDubboStub is used for Dubbo to initialize client interface
func (c *ImportServiceClientImpl) GetDubboStub(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImportServiceClient {
	return NewImportServiceClient(httpClient, baseURL, opts...)
}

// Reference is used for Dubbo consumer to refer this service
func (c *ImportServiceClientImpl) Reference() string {
	return "connect.import.v1.ImportService"
}

// ImportServiceHandler is an implementation of the connect.import.v1.ImportService service.
type ImportServiceHandler interface {
}

// NewImportServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImportServiceHandler(svc ImportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	return "/connect.import.v1.ImportService/", mux
}

// ImportServiceProviderBase is the Dubbo handler base embedded into user implementation api for the
// connect.import.v1.ImportService service.
type ImportServiceProviderBase struct {
	proxyImpl protocol.Invoker
}

// SetProxyImpl sets proxy.
func (s *ImportServiceProviderBase) SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

// GetProxyImpl gets proxy.
func (s *ImportServiceProviderBase) GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *ImportServiceProviderBase) BuildHandler(impl interface{}, opts ...connect.HandlerOption) (string, http.Handler) {
	svc, ok := impl.(ImportServiceHandler)
	if !ok {
		panic("impl has not implemented ImportServiceHandler")
	}
	return NewImportServiceHandler(svc, opts...)
}

func (s *ImportServiceProviderBase) Reference() string {
	return "connect.import.v1.ImportService"
}

// UnimplementedImportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImportServiceHandler struct{}
